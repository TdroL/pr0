#version 330

layout(location = 0) out vec4 outColor;

in vec2 uv;

uniform sampler2D texSource;
uniform vec2 scale;

float unpack2(vec2 source);

void main()
{
	int radius = 4;
	float edgeSharpness = 1.0;

	float gaussian[5];
	gaussian[0] = 0.153170;
	gaussian[1] = 0.144893;
	gaussian[2] = 0.122649;
	gaussian[3] = 0.092902;
	gaussian[4] = 0.062970;

	ivec2 coord = ivec2(gl_FragCoord.xy);

	vec4 origin = texture(texSource, uv);
	vec2 axis = scale / textureSize(texSource, 0);

	float z = unpack2(origin.gb);

	float occlussion = origin.r;
	float weight = gaussian[0];

	float sumOcclussion = occlussion * weight;
	float sumWeight = weight;

	for (int r = -radius; r <= radius; r++)
	{
		if (r == 0) continue;

		vec4 tap = texture(texSource, uv + axis * r * 2.0).rgba;
		float tapZ = unpack2(tap.gb);

		float tapOcclusion = tap.r;
		float tapWeight = gaussian[abs(r)] * max(0.0, 1.0 - (edgeSharpness * 2000.0) * abs(tapZ - z));

		sumOcclussion += tapOcclusion * tapWeight;
		sumWeight += tapWeight;
	}

	outColor.r = sumOcclussion / sumWeight;
	outColor.gba = origin.gba;
}