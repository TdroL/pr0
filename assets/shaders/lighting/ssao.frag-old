#version 330

layout(location = 0) out vec4 outColor;

in vec2 uv;

uniform mat4 P;
uniform float zFar;

uniform sampler2D texNormal;
uniform sampler2D texColor;
uniform sampler2D texDepth;
uniform sampler2D texNoise;

uniform vec2 filterRadius;

const int kernelSize = 16;
uniform vec3 kernel[kernelSize];
uniform vec2 noiseScale;

int samplesCount = 9;
float spins = 7;
float intensity = 0.15;
float contrast = 0.125;
float epsilon = 0.01;
float bias = 0.012;
float radius = 0.0625;

vec3 normalDecode(vec2 enc);
vec3 normalFaceReconstruct(vec3 position);
vec3 positionReconstruct(float z, vec2 uv);
vec2 pack2(float source);
vec3 positionReconstruct(float depth, vec2 xy);
vec3 cameraPositionReconstruct(float depth, vec2 xy);

vec2 getSampleOffset(int i, float randomRotation)
{
	float alpha = float(i + 0.5) / samplesCount;
	float angle = alpha * (2.0 * 3.14159265 * spins) + randomRotation;
	vec2 offset = vec2(cos(angle), sin(angle));

	return offset * alpha;
}

vec3 getPosition(vec2 offset)
{
	vec2 coords = gl_FragCoord.xy + offset;
	/** /
	vec2 uv = coords / textureSize(texDepth, 0).xy;
	float depth = texture(texDepth, uv).r * 2.0 - 1.0;
	/*/
	float depth = texelFetch(texDepth, ivec2(coords), 0).r * 2.0 - 1.0;
	/**/
	return cameraPositionReconstruct(depth, coords + vec2(0.5));
}

float sampleAO(int i, in vec3 position, in vec3 normal, float randomRotation, float diskRadius)
{
	vec2 offset = getSampleOffset(i, randomRotation);

	vec2 sampleOffset = offset * diskRadius;

	vec3 Q = getPosition(sampleOffset);
	vec3 v = Q - position;

	float v_v = dot(v, v);
	float v_n = dot(v, normal);

	float f = pow(max(0.0, radius * radius - v_v), 3); // fallof

	return f * max(0.0, (v_n + position.z * bias) / (v_v + epsilon));
}

void main()
{
	float depth = texture(texDepth, uv).r * 2.0 - 1.0;
	vec3 position = getPosition(vec2(0.0));

	vec2 packedZ = pack2(-position.z / zFar);

	/** /
	vec2 encodedNormal = texture(texNormal, uv).xy;
	vec3 normal = normalDecode(encodedNormal);
	/*/
	vec3 normal = normalFaceReconstruct(position);
	/**/


	/** /
	// source: http://john-chapman-graphics.blogspot.co.uk/2013/01/ssao-tutorial.html

	float occlusion = 0.0;
	vec3 noise = texture(texNoise, uv * noiseScale).xyz * 2.0 - 1.0;
	vec3 tangent = normalize(noise - normal * dot(noise, normal));
	vec3 bitangent = cross(normal, tangent);
	mat3 tbn = mat3(tangent, bitangent, normal);

	float sampleRadius = 0.5;

	for (int i = 0; i < kernelSize; ++i)
	{
		float kernelScale = mix(0.1, 1.0, float(i * i) / float(kernelSize * kernelSize));

		vec3 sample = tbn * kernel[i] * kernelScale * sampleRadius + position;

		vec4 offset = P * vec4(sample, 1.0);
		offset /= offset.w;
		offset.xy = offset.xy * 0.5 + 0.5;

		float sampleDepth = texture(texDepth, offset.xy).x * 2.0 - 1.0;
		vec3 samplePosition = positionReconstruct(sampleDepth, offset.xy);

		float rangeCheck= abs(position.z - samplePosition.z) < sampleRadius ? 1.0 : 0.0;
		occlusion += (samplePosition.z > sample.z ? 1.0 : 0.0) * rangeCheck;
	}

	outColor = vec4(occlusion / float(kernelSize));
	/*/
	// Alchemy AO/SAO


	ivec2 coord = ivec2(gl_FragCoord.xy);
	/** /
	float randomRotation = random(uv);
	/*/
	float randomRotation = (3 * coord.x ^ coord.y + coord.x * coord.y) * 10;
	/**/

	vec3 avgNormal = vec3(0.0);

	float radius2 = radius * radius;
	float occlusion = 0.0;
	float diskRadius = textureSize(texDepth, 0).x * P[1].y * 0.25 * radius / position.z;

	for (int i = 1; i < samplesCount; i++)
	{
		// occlusion += sampleAO(i, position, normal, randomRotation, diskRadius);

		vec2 offset = getSampleOffset(i, randomRotation);
		vec2 sampleOffset = offset * diskRadius;

		vec3 Q = getPosition(sampleOffset);
		vec3 v = Q - position;

		float v_v = dot(v, v);
		float v_n = dot(v, normal);

		float f3 = pow(max(radius2 - v_v, 0.0), 3.0);

		float epsilon = 0.01;

		occlusion += f3 * max(0.0, (v_n - bias) / (v_v + epsilon));
	}

	occlusion *= 5.0 / (pow(radius, 6) * samplesCount);
	occlusion = 1.0 - pow(occlusion, contrast);
	// occlusion = max(0.0, pow(1.0 - occlusion, contrast));
	// occlusion = pow(max(0.0, 1.0 - intensity / samplesCount * occlusion), contrast);

	/**/

	vec2 dFpos = abs(vec2(dFdx(position.z), dFdy(position.z)));
	vec2 dFocclusion = vec2(dFdx(occlusion), dFdy(occlusion));

	if (dFpos.x < 0.02) {
		occlusion -= dFocclusion.x * (float(coord.x & 1) - 0.5);
	}

	if (dFpos.y < 0.02) {
		occlusion -= dFocclusion.y * (float(coord.y & 1) - 0.5);
	}
	/**/

	outColor = vec4(occlusion, packedZ, 1.0);

	/**/
	// outColor.rgb = avgNormal * 5.0 / (pow(radius, 6) * samplesCount);
	// outColor.rgb = vec3(1.0 - occlusion);
	// outColor.rgb = vec3(abs(position.z - positionZUnpack(packedZ)));
}